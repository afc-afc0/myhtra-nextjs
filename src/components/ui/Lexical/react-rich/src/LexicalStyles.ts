import editorStyles from './themes/EditorTheme.module.css';
import styles from './Lexical.module.css';

export const LexicalStyles = {
  autocomplete: editorStyles['PlaygroundEditorTheme__autocomplete'],
  blockCursor: editorStyles['PlaygroundEditorTheme__blockCursor'],
  characterLimit: editorStyles['PlaygroundEditorTheme__characterLimit'],
  code: editorStyles['PlaygroundEditorTheme__code'],
  codeHighlight: {
    atrule: editorStyles['PlaygroundEditorTheme__tokenAttr'],
    attr: editorStyles['PlaygroundEditorTheme__tokenAttr'],
    boolean: editorStyles['PlaygroundEditorTheme__tokenProperty'],
    builtin: editorStyles['PlaygroundEditorTheme__tokenSelector'],
    cdata: editorStyles['PlaygroundEditorTheme__tokenComment'],
    char: editorStyles['PlaygroundEditorTheme__tokenSelector'],
    class: editorStyles['PlaygroundEditorTheme__tokenFunction'],
    'class-name': editorStyles['PlaygroundEditorTheme__tokenFunction'],
    comment: editorStyles['PlaygroundEditorTheme__tokenComment'],
    constant: editorStyles['PlaygroundEditorTheme__tokenProperty'],
    deleted: editorStyles['PlaygroundEditorTheme__tokenProperty'],
    doctype: editorStyles['PlaygroundEditorTheme__tokenComment'],
    entity: editorStyles['PlaygroundEditorTheme__tokenOperator'],
    function: editorStyles['PlaygroundEditorTheme__tokenFunction'],
    important: editorStyles['PlaygroundEditorTheme__tokenVariable'],
    inserted: editorStyles['PlaygroundEditorTheme__tokenSelector'],
    keyword: editorStyles['PlaygroundEditorTheme__tokenAttr'],
    namespace: editorStyles['PlaygroundEditorTheme__tokenVariable'],
    number: editorStyles['PlaygroundEditorTheme__tokenProperty'],
    operator: editorStyles['PlaygroundEditorTheme__tokenOperator'],
    prolog: editorStyles['PlaygroundEditorTheme__tokenComment'],
    property: editorStyles['PlaygroundEditorTheme__tokenProperty'],
    punctuation: editorStyles['PlaygroundEditorTheme__tokenPunctuation'],
    regex: editorStyles['PlaygroundEditorTheme__tokenVariable'],
    selector: editorStyles['PlaygroundEditorTheme__tokenSelector'],
    string: editorStyles['PlaygroundEditorTheme__tokenSelector'],
    symbol: editorStyles['PlaygroundEditorTheme__tokenProperty'],
    tag: editorStyles['PlaygroundEditorTheme__tokenProperty'],
    url: editorStyles['PlaygroundEditorTheme__tokenOperator'],
    variable: editorStyles['PlaygroundEditorTheme__tokenVariable'],
  },
  embedBlock: {
    base: editorStyles['PlaygroundEditorTheme__embedBlock'],
    focus: editorStyles['PlaygroundEditorTheme__embedBlockFocus'],
  },
  hashtag: editorStyles['PlaygroundEditorTheme__hashtag'],
  heading: {
    h1: editorStyles['PlaygroundEditorTheme__h1'],
    h2: editorStyles['PlaygroundEditorTheme__h2'],
    h3: editorStyles['PlaygroundEditorTheme__h3'],
    h4: editorStyles['PlaygroundEditorTheme__h4'],
    h5: editorStyles['PlaygroundEditorTheme__h5'],
    h6: editorStyles['PlaygroundEditorTheme__h6'],
  },
  hr: editorStyles['PlaygroundEditorTheme__hr'],
  image: styles['editor-image'],
  indent: editorStyles['PlaygroundEditorTheme__indent'],
  inlineImage: styles['inline-editor-image'],
  layoutContainer: editorStyles['PlaygroundEditorTheme__layoutContainer'],
  layoutItem: editorStyles['PlaygroundEditorTheme__layoutItem'],
  link: editorStyles['PlaygroundEditorTheme__link'],
  list: {
    checklist: editorStyles['PlaygroundEditorTheme__checklist'],
    listitem: editorStyles['PlaygroundEditorTheme__listItem'],
    listitemChecked: editorStyles['PlaygroundEditorTheme__listItemChecked'],
    listitemUnchecked: editorStyles['PlaygroundEditorTheme__listItemUnchecked'],
    nested: {
      listitem: editorStyles['PlaygroundEditorTheme__nestedListItem'],
    },
    olDepth: [
      editorStyles['PlaygroundEditorTheme__ol1'],
      editorStyles['PlaygroundEditorTheme__ol2'],
      editorStyles['PlaygroundEditorTheme__ol3'],
      editorStyles['PlaygroundEditorTheme__ol4'],
      editorStyles['PlaygroundEditorTheme__ol5'],
    ],
    ul: editorStyles['PlaygroundEditorTheme__ul'],
  },
  ltr: editorStyles['PlaygroundEditorTheme__ltr'],
  mark: editorStyles['PlaygroundEditorTheme__mark'],
  markOverlap: editorStyles['PlaygroundEditorTheme__markOverlap'],
  paragraph: editorStyles['PlaygroundEditorTheme__paragraph'],
  quote: editorStyles['PlaygroundEditorTheme__quote'],
  rtl: editorStyles['PlaygroundEditorTheme__rtl'],
  table: editorStyles['PlaygroundEditorTheme__table'],
  tableCell: editorStyles['PlaygroundEditorTheme__tableCell'],
  tableCellActionButton: editorStyles['PlaygroundEditorTheme__tableCellActionButton'],
  tableCellActionButtonContainer: editorStyles['PlaygroundEditorTheme__tableCellActionButtonContainer'],
  tableCellEditing: editorStyles['PlaygroundEditorTheme__tableCellEditing'],
  tableCellHeader: editorStyles['PlaygroundEditorTheme__tableCellHeader'],
  tableCellPrimarySelected: editorStyles['PlaygroundEditorTheme__tableCellPrimarySelected'],
  tableCellResizer: editorStyles['PlaygroundEditorTheme__tableCellResizer'],
  tableCellSelected: editorStyles['PlaygroundEditorTheme__tableCellSelected'],
  tableCellSortedIndicator: editorStyles['PlaygroundEditorTheme__tableCellSortedIndicator'],
  tableResizeRuler: editorStyles['PlaygroundEditorTheme__tableCellResizeRuler'],
  tableRowStriping: editorStyles['PlaygroundEditorTheme__tableRowStriping'],
  tableSelected: editorStyles['PlaygroundEditorTheme__tableSelected'],
  tableSelection: editorStyles['PlaygroundEditorTheme__tableSelection'],
  text: {
    bold: editorStyles['PlaygroundEditorTheme__textBold'],
    code: editorStyles['PlaygroundEditorTheme__textCode'],
    italic: editorStyles['PlaygroundEditorTheme__textItalic'],
    strikethrough: editorStyles['PlaygroundEditorTheme__textStrikethrough'],
    subscript: editorStyles['PlaygroundEditorTheme__textSubscript'],
    superscript: editorStyles['PlaygroundEditorTheme__textSuperscript'],
    underline: editorStyles['PlaygroundEditorTheme__textUnderline'],
    underlineStrikethrough: editorStyles['PlaygroundEditorTheme__textUnderlineStrikethrough'],
  },
};